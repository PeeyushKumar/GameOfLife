{"version":3,"sources":["components/Node.jsx","components/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","row","col","isAlive","toggleIsAlive","aditionalClassName","className","onClick","Game","componentDidMount","setInterval","update","isValidIdx","countNeighbours","grid","state","count","newGrid","rowIdx","nodeIdx","neighbours","push","setState","this","map","node","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8540a4dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Node = (props) => {\r\n    const {row, col, isAlive, toggleIsAlive} = props;\r\n\r\n    let aditionalClassName = isAlive ? \"alive\" : \"dead\";\r\n\r\n    return(\r\n        <div className={`node ${aditionalClassName}`}\r\n            onClick={() => toggleIsAlive(row,col)}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default Node;","import React, {Component} from 'react'\r\nimport Node from './Node'\r\n\r\nconst noOfRows = 10\r\nconst noOfCols = 20\r\n\r\nexport default class Game extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        const grid = []\r\n        for (let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            const row = [];\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                row.push({\r\n                    isAlive: false,\r\n                });\r\n            }\r\n            grid.push(row); \r\n        }\r\n\r\n        grid[4][8].isAlive=true;\r\n        grid[4][9].isAlive=true;\r\n        grid[4][10].isAlive=true;\r\n        grid[4][11].isAlive=true;\r\n\r\n        this.state = {\r\n            grid,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setInterval(() => {\r\n            this.update()\r\n        }, 100);\r\n    }\r\n\r\n    isValidIdx = (row, col) => (row >= 0 && row < noOfRows && col >= 0 && col < noOfCols)\r\n\r\n    countNeighbours = (row, col) => {\r\n        const {grid} = this.state;\r\n\r\n        let count = 0;\r\n\r\n        if ( this.isValidIdx(row-1, col-1) && grid[row-1][col-1].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row-1, col) && grid[row-1][col].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row-1, col+1) && grid[row-1][col+1].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row, col-1) && grid[row][col-1].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row, col+1) && grid[row][col+1].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row+1, col-1) && grid[row+1][col-1].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row+1, col) && grid[row+1][col].isAlive ) {\r\n            count++;\r\n        }\r\n        if ( this.isValidIdx(row+1, col+1) && grid[row+1][col+1].isAlive ) {\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    update = () => {\r\n        const {grid} = this.state;\r\n        \r\n        const newGrid = [];\r\n        for (let rowIdx=0; rowIdx<noOfRows; rowIdx++) {\r\n            const row = [];\r\n            for (let nodeIdx=0; nodeIdx<noOfCols; nodeIdx++) {\r\n                \r\n                let isAlive = grid[rowIdx][nodeIdx].isAlive;\r\n                const neighbours = this.countNeighbours(rowIdx, nodeIdx);\r\n\r\n                if (neighbours < 2 || neighbours > 3) {\r\n                    isAlive = false;\r\n                }\r\n                else if (neighbours === 3) {\r\n                    isAlive = true;\r\n                }\r\n\r\n                row.push({\r\n                    isAlive\r\n                })\r\n            }\r\n            newGrid.push(row);\r\n        }\r\n\r\n        this.setState({\r\n            grid: newGrid,\r\n        })\r\n    }\r\n\r\n    toggleIsAlive = (row, col) => {\r\n        const {grid} = this.state;\r\n        grid[row][col].isAlive = !grid[row][col].isAlive;\r\n        this.setState({\r\n            grid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state;\r\n\r\n        return(\r\n            <div className=\"node-board\">\r\n                {grid.map((row, rowIdx) => (\r\n                    row.map((node, nodeIdx) => (\r\n                        <Node\r\n                            key={nodeIdx}\r\n                            row={rowIdx}\r\n                            col={nodeIdx}\r\n                            toggleIsAlive={this.toggleIsAlive}\r\n                            isAlive={node.isAlive} \r\n                        ></Node>\r\n                    ))\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}